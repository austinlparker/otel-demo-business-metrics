plugins {
    id 'application'
    id 'com.google.protobuf' version '0.8.18'
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

description = 'Business Metric Service'
group = 'businessmetricservice'
version = '0.1.0-SNAPSHOT'

def grpcVersion = "1.45.1"
def protocVersion = "3.20.0"


tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

ext {
    offlineCompile = new File("$buildDir/output/lib")
}

def protoSourceDir = findProperty('protoSourceDir')?: project.projectDir.parentFile.parentFile.toPath().toString() + "/pb"
def protoDestDir = project.buildDir.toPath().toString() + "/proto"

// Copy protos to the build directory
tasks.register('copyProtos', Copy) {
    from protoSourceDir
    into protoDestDir
}

// Include the output directory of copyProtos in main source set so they are
// picked up by the protobuf plugin
sourceSets {
    main {
        proto {
            srcDir(protoDestDir)
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks { task ->
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka:2.7.2'
    implementation 'io.opentelemetry:opentelemetry-api:1.25.0'
    implementation 'com.google.protobuf:protobuf-java:3.18.1'
    implementation "com.google.api.grpc:proto-google-common-protos:2.8.0"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation 'io.grpc:grpc-netty-shaded:1.41.0'
    implementation 'io.grpc:grpc-protobuf:1.41.0'
    implementation 'io.grpc:grpc-stub:1.41.0'
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            srcDirs 'src/main/java', 'src/generated/main/java', 'src/generated/main/grpc'
        }
    }
}

afterEvaluate {
    // Ensure protos are copy before classes are generated
    tasks.getByName('processResources').dependsOn 'copyProtos'
    tasks.getByName('generateProto').dependsOn 'copyProtos'
}


repositories {
    mavenCentral()
    mavenLocal()
}

startScripts.enabled = false

task downloadRepos(type: Copy) {
    from configurations.compileClasspath
    into offlineCompile
    from configurations.runtimeClasspath
    into offlineCompile
}

task businessMetricService(type: CreateStartScripts) {
    mainClass.set('businessmetricservice.BusinessMetricServiceApplication')
    applicationName = 'BusinessMetricService'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(businessMetricService)
    fileMode = 0755
}
